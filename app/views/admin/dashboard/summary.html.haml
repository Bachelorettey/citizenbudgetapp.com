:javascript
  google.load('visualization', '1', {language: '#{iso639_locale}'});

%h1
  =t '.header'
  %span=t '.period', starts_on: l(@starts_on, format: :short), ends_on: l(@ends_on, format: :long)
%p.attribution=t '.by', author: t('app.author_name'), organization: @questionnaire.organization.name

.blocks.clearfix
  - if @statistics[:visitors]
    .block.block-small
      .number
        = number_with_delimiter @statistics[:visitors]
      .title
        =t 'statistics.visitors'

  .block.block-small
    .number
      = number_with_delimiter @statistics[:responses]
    .title
      =t 'statistics.responses'
    .subtitle
      =t 'statistics.participation_rate', percentage: number_to_percentage(@statistics[:responses] / @statistics[:visitors].to_f * 100)

  .block.block-large
    .number
      = distance_of_time_in_words @questionnaire.time_to_complete
    .title
      =t 'statistics.time_to_complete'
    .subtitle
      &nbsp;

%h2=t '.summary'
-#%p=t '.description'
-# @todo Add big table.

%h3=t '.detail.header'

- i = 0
- @questionnaire.sections.budgetary.each do |section|
  %h4= section.title

  - section.questions.each do |q|
    - if q.budgetary?
      -# @todo The proportion of participants who must be in favor of a change for
      -#   it to be significant depends on the sample size.
      %div(class="question #{@details[q.id.to_s][:percentage_of_population] >= 0.55 ? 'stress' : 'subdue'}")
        %h5
          %span= i += 1
          = q.title
        %p
          %strong= number_to_percentage @details[q.id.to_s][:percentage_of_population] * 100
          - if q.widget == 'scaler'
            -# @todo
          - elsif q.widget == 'slider'
            -# @todo Figure out where ActiveAdmin puts its helpers.
            =t '.detail.widget.slider', minimum_units: number_with_precision(q.minimum_units), minimum_amount: number_to_currency(q.minimum_amount), maximum_units: number_with_precision(q.maximum_units), maximum_amount: number_to_currency(q.maximum_amount), default_value: q.default_value
            =t(".detail.choice_and_impact.#{q.section.group}.#{@details[q.id.to_s][:mean_impact] >= 0 ? :positive : :negative}", choice: number_with_precision(@details[q.id.to_s][:mean_choice], precision: 1), impact: number_to_currency(@details[q.id.to_s][:mean_impact])).html_safe
            - unless [q.maximum_units, q.minimum_units].include? q.cast_default_value
              =t '.detail.bidirectional', proportion_who_decrease: number_to_percentage(@details[q.id.to_s][:proportion_who_decrease] * 100, precision: 0), mean_decrease: number_with_precision(@details[q.id.to_s][:mean_decrease], precision: 1), proportion_who_increase: number_to_percentage(@details[q.id.to_s][:proportion_who_increase] * 100, precision: 0), mean_increase: number_with_precision(@details[q.id.to_s][:mean_increase], precision: 1)
          - elsif q.widget == 'onoff'
            =t ".detail.widget.onoff.#{q.section.group}.#{@details[q.id.to_s][:mean_impact] >= 0 ? :positive : :negative}", minimum_amount: number_to_currency(q.minimum_amount), maximum_amount: number_to_currency(q.maximum_amount)
    - else
      %div.question.stress
        %h5
          %span= i += 1
          = q.title
        - if q.description?
          %p
            %i
              =t :left_quote
              = strip_tags(RDiscount.new(q.description).to_html)
              =t :right_quote
        %p
          %strong= number_to_percentage @details[q.id.to_s][:percentage_of_population] * 100
          =t '.detail.widget.nonbudgetary'
        %table
          - @details[q.id.to_s][:counts].sort_by{|_,count| -count}.each do |answer,count|
            %tr
              %td= number_to_percentage count * 100, precision: 0
              %th= answer

%h2=t '.demography'

- if @fields.any?
  -# @todo
- else
  -# Backwards compatibility.
  - gender       = @responses.where(:gender.in => Response::GENDERS)
  - gender_count = gender.count.to_f
  - gender_data  = Response::GENDERS.map{|g| v = @responses.where(gender: g).count; [t(g, scope: :gender), v / gender_count, number_to_percentage(v / gender_count * 100)]}

  - age       = @responses.where(:age.nin => [nil, 0])
  - age_count = age.count.to_f
  - age_data  = age.min(:age).to_i.upto(age.max(:age).to_i).map{|a| v = @responses.where(age: a).count; [a.to_s, v / age_count, number_to_percentage(v / age_count * 100)]}

  .charts.clearfix
    .chart.chart-small
      %h3
        = Response.human_attribute_name :gender
        %span=t 'statistics.participation_rate', percentage: number_to_percentage(gender_count / @statistics[:responses].to_f * 100)
      %div#gender
    .chart.chart-large
      %h3
        = Response.human_attribute_name :age
        %span=t 'statistics.participation_rate', percentage: number_to_percentage(age_count / @statistics[:responses].to_f * 100)
      %div#age

  .tables
    %h3=t '.response_rates'
    %table
      %tbody
        %tr
          %td= number_to_percentage @responses.where(:comments.ne => '').count / @statistics[:responses].to_f * 100, precision: 0
          %th= Response.human_attribute_name :comments
        %tr
          %td= number_to_percentage @responses.where(newsletter: 1).count / @statistics[:responses].to_f * 100, precision: 0
          %th= Response.human_attribute_name :newsletter
        %tr
          %td= number_to_percentage @responses.where(subscribe: 1).count / @statistics[:responses].to_f * 100, precision: 0
          %th= Response.human_attribute_name :subscribe

  :javascript
    draw('ColumnChart', 'gender', [
      "#{Response.human_attribute_name :gender}",
    ], #{gender_data.to_json}, {
      chartArea: {
        top: 0,
        left: 30,
        width: '100%',
        height: '85%'
      },
      fontSize: 12,
      gridlineColor: '#fff',
      vAxis: {
        format: "#{t :percentage_format}",
        viewWindowMode: 'explicit',
        viewWindow: {
          max: #{gender_data.map{|x| x[1]}.max},
          min: 0
        }
      },
      legend: {
        position: 'none'
      },
      tooltip: {}
    });

    draw('ColumnChart', 'age', [
      "#{Response.human_attribute_name :age}",
    ], #{age_data.to_json}, {
      chartArea: {
        top: 0,
        left: 30,
        width: '100%',
        height: '85%'
      },
      fontSize: 12,
      gridlineColor: '#fff',
      hAxis: {
        showTextEvery: 2,
        textStyle: {
          fontSize: 9
        }
      },
      vAxis: {
        format: "#{t :percentage_format}",
        viewWindowMode: 'explicit',
        viewWindow: {
          max: #{age_data.map{|x| x[1]}.max},
          min: 0
        }
      },
      legend: {
        position: 'none'
      },
      tooltip: {}
    });

.bars.clearfix
  .bar
    .number
      = @statistics[:mean_number_of_changes].round
    .title
      =t 'statistics.mean_number_of_changes', count: @number_of_budgetary_questions
  .bar
    .number
      = number_to_currency @statistics[:mean_magnitude_of_changes]
    .title
      =t 'statistics.mean_magnitude_of_changes'

-# @todo Add timeline and web traffic.